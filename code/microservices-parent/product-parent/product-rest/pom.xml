<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.demo.microservice</groupId>
        <artifactId>product-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>product-rest</artifactId>
    <packaging>jar</packaging>
    <name>product-rest</name>
    <description>Module contains the restful controllers.</description>

    <properties>

        <!-- Docker properties -->
        <docker.image.name>imamchishty/${project.artifactId}:${project.version}</docker.image.name>
        <docker.from>java:8u40</docker.from>
        <docker.container.port>8080</docker.container.port>
        <docker.host.port>8080</docker.host.port>

    </properties>

    <dependencies>

        <!-- Internal dependencies -->

        <dependency>
            <groupId>com.demo.microservice</groupId>
            <artifactId>product-exception</artifactId>
        </dependency>

        <dependency>
            <groupId>com.demo.microservice</groupId>
            <artifactId>product-model</artifactId>
        </dependency>

        <dependency>
            <groupId>com.demo.microservice</groupId>
            <artifactId>product-service</artifactId>
        </dependency>

        <!-- Shedhack -->

        <dependency>
            <groupId>com.shedhack.trace</groupId>
            <artifactId>trace-request-api</artifactId>
        </dependency>

        <dependency>
            <groupId>com.shedhack.trace</groupId>
            <artifactId>trace-request-filter</artifactId>
        </dependency>

        <!-- FIXME if you want the trace request model to
            be stored in a relational db then:

             1. Uncomment the trace-request-jpa dependency.
             2. In Application.java:
                - add: @EnableTraceRequestJpa.
                - add: @Autowired JpaTraceRequestInterceptor jpaTraceRequestInterceptor;
                - add: jpaTraceRequestInterceptor to the list of Interceptors for the RequestFilter.
            -->
        <!--
        <dependency>
            <groupId>com.shedhack.trace</groupId>
            <artifactId>trace-request-jpa</artifactId>
        </dependency> -->

        <dependency>
            <groupId>com.shedhack.exception</groupId>
            <artifactId>exception-controller-spring</artifactId>
        </dependency>

        <dependency>
            <groupId>com.shedhack.exception</groupId>
            <artifactId>exception-core</artifactId>
        </dependency>

        <dependency>
            <groupId>com.shedhack.thread</groupId>
            <artifactId>thread-context-aspect</artifactId>
        </dependency>

        <dependency>
            <groupId>com.shedhack.spring</groupId>
            <artifactId>spring-actuator</artifactId>
        </dependency>

        <!-- Logging via SLF4J & log4j2 -->

<!--        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-jcl</artifactId>
        </dependency>-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <!-- Spring -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator-docs</artifactId>
        </dependency>

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>hal-browser</artifactId>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Config server, see bootstrap.yml -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-ribbon</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-feign</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-hystrix</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
        </dependency>

        <!-- Swagger http://host:port/api/docs-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.4.0</version>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.4.0</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.3-1100-jdbc41</version>
        </dependency>

        <!-- Graylog -->
        <dependency>
            <groupId>org.graylog2.log4j2</groupId>
            <artifactId>log4j2-gelf</artifactId>
            <version>1.2.0</version>
        </dependency>

        <!-- Test dependencies -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- reloads the application when changes detected -->
        <!-- for intellij you need to Build>Make Project to cause changes -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>

    </dependencies>

    <build>
        <finalName>product-rest</finalName>

        <!-- Added to override properties-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.xml</include>
                    <include>**/*.txt</include>
                </includes>
            </resource>
        </resources>

        <plugins>

            <!-- Git properties
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.1.5</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <generateGitPropertiesFilename>src/main/resources/git-build.properties</generateGitPropertiesFilename>
                    <format>properties</format>
                    <dateFormat>dd.MM.yyyy HH:mm:ss z</dateFormat>
                </configuration>
            </plugin>-->

            <!-- Filtering, mvn resources:resources, maven will replace props using @,
            for example you want @pom.version@ -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <delimiters>
                        <delimiter>@</delimiter>
                    </delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                </configuration>
            </plugin>

            <!-- mvn spring-boot:run -Dserver.port=8081 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>

                    <!-- Helps with automatic restart when files are changed.-->
                    <fork>true</fork>
                </configuration>
            </plugin>

            <!-- Docker plugin - docker:build ALWAYS requires to be called after mvn package!!!!!-->
            <!-- docker:build, docker:start, docker:stop, docker:watch, docker:remove, docker:logs, docker:source -->
            <!-- -Ddocker.follow=true also a good option -->
            <!-- To find you docker ip address with docker machine: [docker-machine ip default] -->
            <!-- When running on a mac you may need [eval "$(docker-machine env default)"] : with the quotes -->
            <!-- Running with JMeter (could also run integration tests (need to update the executions):
                mvn package -DskipTests docker:build
                mvn docker:run -Ddocker.follow=false jmeter:jmeter -Dhost=192.168.99.100 -Dport=8080 docker:stop
            -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.15.9</version>
                <configuration>

                    <!-- If you have a different reg set it here
                    <registry>hub.docker.com</registry> -->
                    <verbose>true</verbose>
                    <logDate>default</logDate>
                    <autoPull>true</autoPull>
                    <verbose>true</verbose>
                    <images>

                        <image>
                            <alias>db</alias>
                            <name>postgres:8</name>
                            <run>
                                <wait>
                                    <log>database system is ready to accept connections</log>
                                    <time>20000</time>
                                </wait>
                                <log>
                                    <prefix>DB</prefix>
                                    <color>green</color>
                                </log>
                                <ports>
                                    <port>5432:5432</port>
                                </ports>
                            </run>
                        </image>

                        <image>
                            <alias>service</alias>
                            <name>${docker.image.name}</name>

                            <build>
                                <from>${docker.from}</from>

                                <assembly>
                                    <basedir>/maven</basedir>
                                    <inline xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                            xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                                            xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">

                                        <dependencySets>
                                            <dependencySet>
                                                <includes>
                                                    <include>${project.groupId}:${project.artifactId}</include>
                                                </includes>
                                                <outputDirectory>.</outputDirectory>
                                                <outputFileNameMapping>app.jar</outputFileNameMapping>
                                            </dependencySet>
                                        </dependencySets>
                                    </inline>
                                </assembly>

                                <ports>
                                    <port>${docker.container.port}</port>
                                </ports>

                                <entryPoint>
                                    <arg>java</arg>
                                    <arg>-Djava.security.egd=file:/dev/./urandom</arg>
                                    <arg>-jar</arg>
                                    <arg>/maven/app.jar</arg>
                                </entryPoint>

                            </build>

                            <run>
                                <ports>
                                    <port>${docker.host.port}:${docker.container.port}</port>
                                </ports>

                                <log>
                                    <prefix>TC</prefix>
                                    <color>cyan</color>
 <!--                                   <driver>
                                        <name>gelf</name>
                                        <opts>
                                            <gelf-address>udp://${docker.host.address}:12201</gelf-address>

                                        </opts>
                                    </driver>-->
                                </log>

                                <wait>
                                    <http>
                                        <url>http://${docker.host.address}:${docker.host.port}/api/ping</url>
                                        <method>GET</method>
                                    </http>
                                    <log>${docker.image.name} is ready.</log>
                                    <time>200000</time>
                                </wait>

                                <links>
                                    <link>db:db</link>
                                </links>
                            </run>
                        </image>


                    </images>
                </configuration>

            </plugin>

        </plugins>
    </build>


</project>